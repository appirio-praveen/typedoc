{
	"id": 0,
	"name": "MyAwesomeProject",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"Screens/Home\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Volumes/WorkHD/ReactTS/MyAwesomeProject/components/Screens/Home.tsx",
			"children": [
				{
					"id": 6,
					"name": "HomeScreen",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 12,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 7,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 8,
									"name": "new HomeScreen",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 9,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Props",
												"id": 2
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HomeScreen",
										"id": 6
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "components/Screens/Home.tsx",
									"line": 17,
									"character": 63
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 58,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
								"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 445,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.context"
							}
						},
						{
							"id": 77,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 470,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "Readonly",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Props",
												"id": 2
											}
										]
									},
									{
										"type": "reference",
										"name": "Readonly",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 78,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 79,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 470,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																79
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 470,
															"character": 47
														}
													]
												}
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.props"
							}
						},
						{
							"id": 81,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 476,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 82,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 83,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 84,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 476,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.refs"
							}
						},
						{
							"id": 80,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 471,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Readonly",
								"typeArguments": [
									{
										"type": "reference",
										"name": "State",
										"id": 4
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.state"
							}
						},
						{
							"id": 57,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 427,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "Context",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.contextType"
							}
						},
						{
							"id": 37,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 38,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 658,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 43,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 44,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 45,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Props",
														"id": 2
													}
												]
											}
										},
										{
											"id": 46,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 690,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 52,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 53,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 54,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Props",
														"id": 2
													}
												]
											}
										},
										{
											"id": 55,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "State",
														"id": 4
													}
												]
											}
										},
										{
											"id": 56,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 718,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 22,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 23,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 24,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 25,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 587,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 13,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 14,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 566,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 30,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 31,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 32,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Props",
														"id": 2
													}
												]
											}
										},
										{
											"id": 33,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "State",
														"id": 4
													}
												]
											}
										},
										{
											"id": 34,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SS",
												"id": 12
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 629,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 35,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 36,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 644,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 39,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 40,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 41,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Props",
														"id": 2
													}
												]
											}
										},
										{
											"id": 42,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 673,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 20,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 21,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 582,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 47,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 48,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 49,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Props",
														"id": 2
													}
												]
											}
										},
										{
											"id": 50,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "State",
														"id": 4
													}
												]
											}
										},
										{
											"id": 51,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 703,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 72,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 73,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 74,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 75,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 76,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 462,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 26,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 27,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 28,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Props",
														"id": 2
													}
												]
											}
										},
										{
											"id": 29,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "State",
														"id": 4
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 623,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 10,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 11,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "components/Screens/Home.tsx",
									"line": 27,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 59,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 60,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 61,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "State"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 62,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 63,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 64,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 65,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Readonly",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "State",
																						"id": 4
																					}
																				]
																			}
																		},
																		{
																			"id": 66,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Readonly",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "Props",
																						"id": 2
																					}
																				]
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 67,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 458,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 68,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 69,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 70,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 71,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 457,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.setState"
							}
						},
						{
							"id": 15,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 16,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 17,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Props",
														"id": 2
													}
												]
											}
										},
										{
											"id": 18,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "State",
														"id": 4
													}
												]
											}
										},
										{
											"id": 19,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 577,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								58,
								77,
								81,
								80,
								57
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								37,
								43,
								52,
								22,
								13,
								30,
								35,
								39,
								20,
								47,
								72,
								26,
								10,
								59,
								15
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Screens/Home.tsx",
							"line": 17,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Component",
							"typeArguments": [
								{
									"type": "reference",
									"name": "Props",
									"id": 2
								},
								{
									"type": "reference",
									"name": "State",
									"id": 4
								}
							]
						}
					]
				},
				{
					"id": 2,
					"name": "Props",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3,
							"name": "navigation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "components/Screens/Home.tsx",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "NavigationScreenProp",
								"typeArguments": [
									{
										"type": "reference",
										"name": "NavigationState"
									},
									{
										"type": "reference",
										"name": "NavigationParams"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Screens/Home.tsx",
							"line": 9,
							"character": 22
						}
					]
				},
				{
					"id": 4,
					"name": "State",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 5,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Screens/Home.tsx",
									"line": 14,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Screens/Home.tsx",
							"line": 13,
							"character": 15
						}
					]
				},
				{
					"id": 85,
					"name": "styles",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Screens/Home.tsx",
							"line": 38,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 86,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 96,
									"name": "button",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {},
									"children": [
										{
											"id": 97,
											"name": "flex",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 51,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 98,
											"name": "paddingVertical",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 52,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												97,
												98
											]
										}
									],
									"sources": [
										{
											"fileName": "components/Screens/Home.tsx",
											"line": 50,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 90,
									"name": "buttons",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {},
									"children": [
										{
											"id": 93,
											"name": "alignItems",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 46,
													"character": 14
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "stretch"
											},
											"defaultValue": "\"stretch\""
										},
										{
											"id": 94,
											"name": "alignSelf",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 47,
													"character": 13
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "center"
											},
											"defaultValue": "\"center\""
										},
										{
											"id": 95,
											"name": "borderWidth",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 48,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "5"
										},
										{
											"id": 91,
											"name": "flexDirection",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 44,
													"character": 17
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "row"
											},
											"defaultValue": "\"row\""
										},
										{
											"id": 92,
											"name": "minHeight",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 45,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "70"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												93,
												94,
												95,
												91,
												92
											]
										}
									],
									"sources": [
										{
											"fileName": "components/Screens/Home.tsx",
											"line": 43,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 99,
									"name": "greeting",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {},
									"children": [
										{
											"id": 100,
											"name": "color",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 55,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"#999\""
										},
										{
											"id": 101,
											"name": "fontWeight",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 56,
													"character": 14
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bold"
											},
											"defaultValue": "\"bold\""
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												100,
												101
											]
										}
									],
									"sources": [
										{
											"fileName": "components/Screens/Home.tsx",
											"line": 54,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 87,
									"name": "root",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {},
									"children": [
										{
											"id": 88,
											"name": "alignItems",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 40,
													"character": 14
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "center"
											},
											"defaultValue": "\"center\""
										},
										{
											"id": 89,
											"name": "alignSelf",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Home.tsx",
													"line": 41,
													"character": 13
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "center"
											},
											"defaultValue": "\"center\""
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												88,
												89
											]
										}
									],
									"sources": [
										{
											"fileName": "components/Screens/Home.tsx",
											"line": 39,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										96,
										90,
										99,
										87
									]
								}
							]
						}
					},
					"defaultValue": " StyleSheet.create({\n  root: {\n    alignItems: 'center',\n    alignSelf: 'center',\n  },\n  buttons: {\n    flexDirection: 'row',\n    minHeight: 70,\n    alignItems: 'stretch',\n    alignSelf: 'center',\n    borderWidth: 5,\n  },\n  button: {\n    flex: 1,\n    paddingVertical: 0,\n  },\n  greeting: {\n    color: '#999',\n    fontWeight: 'bold',\n  },\n})"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2,
						4
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						85
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Screens/Home.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 102,
			"name": "\"Screens/Login\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Volumes/WorkHD/ReactTS/MyAwesomeProject/components/Screens/Login.tsx",
			"children": [
				{
					"id": 103,
					"name": "Props",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 104,
							"name": "navigation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "components/Screens/Login.tsx",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "NavigationScreenProp",
								"typeArguments": [
									{
										"type": "reference",
										"name": "NavigationState"
									},
									{
										"type": "reference",
										"name": "NavigationParams"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								104
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Screens/Login.tsx",
							"line": 9,
							"character": 22
						}
					]
				},
				{
					"id": 110,
					"name": "styles",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Screens/Login.tsx",
							"line": 49,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 111,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 112,
									"name": "container",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {},
									"children": [
										{
											"id": 114,
											"name": "alignItems",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 52,
													"character": 14
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "center"
											},
											"defaultValue": "\"center\""
										},
										{
											"id": 116,
											"name": "backgroundColor",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 54,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"#ecf0f1\""
										},
										{
											"id": 113,
											"name": "flex",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 51,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 115,
											"name": "justifyContent",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 53,
													"character": 18
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "center"
											},
											"defaultValue": "\"center\""
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												114,
												116,
												113,
												115
											]
										}
									],
									"sources": [
										{
											"fileName": "components/Screens/Login.tsx",
											"line": 50,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 117,
									"name": "input",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {},
									"children": [
										{
											"id": 122,
											"name": "borderColor",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 61,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"black\""
										},
										{
											"id": 121,
											"name": "borderWidth",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 60,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 119,
											"name": "height",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 58,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "44"
										},
										{
											"id": 123,
											"name": "marginBottom",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 62,
													"character": 16
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "10"
										},
										{
											"id": 120,
											"name": "padding",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 59,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "10"
										},
										{
											"id": 118,
											"name": "width",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 57,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "200"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												122,
												121,
												119,
												123,
												120,
												118
											]
										}
									],
									"sources": [
										{
											"fileName": "components/Screens/Login.tsx",
											"line": 56,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										112,
										117
									]
								}
							]
						}
					},
					"defaultValue": " StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  input: {\n    width: 200,\n    height: 44,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 10,\n  },\n})"
				},
				{
					"id": 105,
					"name": "Login",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 106,
							"name": "Login",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 107,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 108,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 109,
													"name": "navigation",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "components/Screens/Login.tsx",
															"line": 13,
															"character": 33
														}
													],
													"type": {
														"type": "reference",
														"name": "NavigationScreenProp",
														"typeArguments": [
															{
																"type": "reference",
																"name": "NavigationState"
															},
															{
																"type": "reference",
																"name": "NavigationParams"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														109
													]
												}
											],
											"sources": [
												{
													"fileName": "components/Screens/Login.tsx",
													"line": 13,
													"character": 22
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "components/Screens/Login.tsx",
							"line": 13,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						103
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						110
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						105
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Screens/Login.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 124,
			"name": "\"__tests__/Hello\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Volumes/WorkHD/ReactTS/MyAwesomeProject/components/__tests__/Hello.tsx",
			"sources": [
				{
					"fileName": "components/__tests__/Hello.tsx",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				102,
				124
			]
		}
	]
}